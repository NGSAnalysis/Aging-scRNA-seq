library(dplyr)
library(Seurat)
library(patchwork)
library(Matrix)
library(ggplot2)
library(reshape2)
library(viridis)
library(RColorBrewer)
library(magrittr)



#########Data integration##########
org.data<-Read10X_h5( "your own files with cell ranger processing (h5 format)", use.names = TRUE, unique.features = TRUE)
org.data<-RenameCells(object=org.data,new.names=paste(names(Idents(tmp)),"-S",1,sep=""))
bm<-org.data

##standard QC
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
bm[["percent.mt"]] <- PercentageFeatureSet(bm, pattern = "^MT-")

#feature filtering
bm <- subset(bm, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 15)


#Normalization
bm <- NormalizeData(bm, normalization.method = "LogNormalize", scale.factor = 10000)

#identifying highly variable features
bm <- FindVariableFeatures(bm, selection.method = "vst", nfeatures = 2000)

### scailing (Dmension reduction)
all.genes <- rownames(bm)
bm <- ScaleData(bm, features = all.genes)

#PCA
bm <- RunPCA(bm, features = VariableFeatures(object = bm))

### Determine the ‘dimensionality’ of the dataset
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# !!!!!!!!!! Time consumpion process !!!!!!!!!!
# computation time: 7 min !!!
bm <- JackStraw(bm, num.replicate = 100)
bm <- ScoreJackStraw(bm, dims = 1:20)


#replication time and pvalue
JackStrawPlot(bm, dims = 1:15)
#sd 
ElbowPlot(bm)

###Clustering
bm <- FindNeighbors(bm, dims = 1:10)
bm <- FindClusters(bm, resolution = 0.5)

# Look at cluster IDs of the first 5 cells
head(Idents(bm), 5)

# UMAP / tSNE
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
bm <- RunUMAP(bm, dims = 1:10)
bm <- RunTSNE(bm, dims = 1:10)
dim(bm)



#######################demultiplexing#######################

############## After RunUMAP ##############
#####multiplet elimination#####
##ref:https://github.com/chris-mcginnis-ucsf/DoubletFinder
#bm<-readRDS("/exdisk/sda1/scMouse/process/analysis/bm.rds")


library(DoubletFinder)

## pK Identification (no ground-truth) 
sweep.res.list_bm <- paramSweep_v3(bm, PCs = 1:10, sct = FALSE)
sweep.stats_bm <- summarizeSweep(sweep.res.list_bm, GT = FALSE)
bcmvn_bm <- find.pK(sweep.stats_bm)

## Homotypic Doublet Proportion Estimate 
annotations <- Idents(bm)
homotypic.prop <- modelHomotypic(annotations)           
nExp_poi <- round(0.075*length(names(Idents(bm))))  

## Assuming 7.5% doublet formation rate - tailor for your dataset
nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))

## Run DoubletFinder with varying classification stringencies 
bm <- doubletFinder_v3(bm, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
#bm <- doubletFinder_v3(bm, PCs = 1:10, pN = 0.25, pK = 0.09, nExp = nExp_poi.adj, reuse.pANN = "pANN_0.25_0.09_3803", sct = FALSE)

##3803, 3324 means the number of doublet 
summary(as.factor(bm@meta.data[,8]))

## cell culturing ##
elim_cell<-rownames(bm@meta.data[bm@meta.data[,8]=="Doublet",])
length(elim_cell)

filt.cell<-rownames(bm@meta.data[bm@meta.data[,8]=="Singlet",])
length(filt.cell)


bm.dmp1<-subset(bm, cells=filt.cell)
#saveRDS(bm.dmp1, file = "bm_dmp_strictfilter_y1.rds")



bm.dmp<-readRDS("/exdisk/sda1/scMouse/HN00162547/HN00162547_10X_RawData_Outs/process/analysis/bm_dmp_all_y1.rds")


bm.dmp <- RenameIdents(object = bm.dmp,
                         "0" = "BSN",
                         "1" = "BSN",
                         "2" = "MM",
                         "3" = "Macrophages",
                         "4" = "iDCs",
                         "5" = "MM",
                         "6" = "pre-B cells",
                         "7" = "MDCP",
                         "8" = "CLPs",
                         "9" = "CMPs",
                         "10" = "pre-pDCs",
                         "11" = "iDCs",
                         "12" = "pre-B cells",
                         "13" = "MSCs",
                         "14" = "Osteoclast"
                         )

bm.dmp$orig.ident<-factor(bm.dmp$orig.ident, levels=c("young","middle","old"))
Idents(bm.dmp)<-factor(Idents(bm.dmp),levels=rev(c("MSCs","CMPs","MDCP","Macrophages","pre-pDCs","iDCs","MM","BSN","CLPs","pre-B cells","Osteoclast")))
bm.dmp$assigned_celltype <- Idents(bm.dmp)

#Dimension plot
DimPlot(bm.dmp, group.by = "orig.ident",reduction = "tsne" , pt.size=1,label.size=7,label=T,)
DimPlot(bm.dmp, reduction = "umap" , pt.size=1,label.size=7,label=T)


########## trajectory analysis ########

library(Signac)
library(Seurat)
library(SeuratWrappers)
library(monocle3)
library(Matrix)
library(ggplot2)
library(patchwork)



tra.data<-seurat.data
tra.data.cds <- as.cell_data_set(tra.data)
tra.data.cds <- cluster_cells(cds = tra.data.cds, reduction_method = "UMAP")
tra.data.cds <- learn_graph(tra.data.cds)

###set start point cell hematopoitric cells barcode
start<-WhichCells(bm.dmp, idents = "CMPs")
tra.data.cds <- order_cells(tra.data.cds, reduction_method = "UMAP", root_cells = start)



plot_cells(
  cds = tra.data.cds,
  color_cells_by = "pseudotime",
  trajectory_graph_segment_size = 2, #line size
  graph_label_size = 0, # number label size
  group_label_size = 5,
  trajectory_graph_color = "black",
  cell_size=2,
  reduction_method = "UMAP",
  show_trajectory_graph = TRUE
) + theme(axis.line = element_line(colour = 'black', size = 5, linetype = "solid"),
          axis.text=element_text(size=15),
          axis.text.x = element_text(size = 15),
          axis.title=element_text(size=15,face="bold"),
          legend.title=element_text(size=15,face="bold"),
          legend.text=element_text(size=15,face="bold"))


########## nebulosa density plot ##########
library(Nebulosa)
plot_density(bm.dmp,features=top.markers$gene,reduction="umap")


########## Diffusion map ##########

library(SingleCellExperiment)
library(ggbeeswarm)
library(ggthemes)
library(destiny)
library(scater)

bm.sce<-as.SingleCellExperiment(gpcs.young)
pca <- reducedDim(bm.sce, "PCA")

bm.sce$PC1 <- pca[, 1]
bm.sce$PC2 <- pca[, 2]


bm.sce$pseudotime_PC1 <- rank(bm.sce$PC1)  # rank cells by their PC1 score
#bm.sce$assigned_celltype<-factor(bm.sce$assigned_celltype, levels=c("CMPs","MDCP", "Macrophages","pDCs", "iDCs"))
bm.sce$assigned_celltype<-factor(bm.sce$assigned_celltype, levels=c("CMPs", "MM","BSN"))
bm.sce$CellType<-bm.sce$assigned_celltype

## Cell order PCA
#plot
ggplot(as.data.frame(colData(bm.sce)), aes(x = pseudotime_PC1, y = CellType, 
                                             colour = CellType)) +labs("Cell type") + 
    geom_quasirandom(groupOnX = FALSE) + 
    scale_colour_calc() + theme_classic() +
    xlab("Time point") + ylab("Cell type") + 
    ggtitle("Cells ordered by first principal component") +
    theme(axis.line = element_line(colour = 'black', size = 0.5, linetype = "solid"),
          axis.text=element_text(size=15),
          axis.text.x = element_text(size = 15),
          axis.title=element_text(size=15,face="bold"),
          legend.position="none")



########### cell cell communication #########
########### cell cell communication #########
########### cell cell communication #########
#ref: https://htmlpreview.github.io/?https://github.com/sqjin/CellChat/blob/master/tutorial/Comparison_analysis_of_multiple_datasets.html


library(CellChat)
library(patchwork)
options(stringsAsFactors = FALSE)

seurat.data<-bm.dmp

data.input <- GetAssayData(seurat.data, assay = "RNA", slot = "data") # normalized data matrix
labels <- Idents(seurat.data)
meta <- data.frame(group = labels, row.names = names(labels)) # create a dataframe of the cell labels


cellchat <- createCellChat(object = data.input, meta = meta, group.by = "group")
CellChatDB <- CellChatDB.mouse # use CellChatDB.mouse if running on mouse data
showDatabaseCategory(CellChatDB)

# Show the structure of the database
dplyr::glimpse(CellChatDB$interaction)

# use a subset of CellChatDB for cell-cell communication analysis
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling") # use Secreted Signaling
# use all CellChatDB for cell-cell communication analysis
# CellChatDB.use <- CellChatDB # simply use the default CellChatDB

# set the used database in the object
cellchat@DB <- CellChatDB.use

# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary even if using the whole database
future::plan("multiprocess", workers = 4) # do parallel
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
### project gene expression data onto PPI network (optional)
#cellchat <- projectData(cellchat, PPI.human)
cellchat <- projectData(cellchat, PPI.mouse)


### long time consume
cellchat <- computeCommunProb(cellchat)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat <- filterCommunication(cellchat, min.cells = 10)

##extract inferred cc

cellchat <- computeCommunProbPathway(cellchat)
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))


####signaling role identification
# Compute the network centrality scores
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP") # the slot 'netP' means the inferred intercellular communication network of signaling pathways

cellchat<-rankNetPairwise(cellchat)

colourCount <- length(unique(seurat.data$assigned_celltype))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))

#total network
par(mfrow = c(1,2), xpd=TRUE)
netVisual_circle(cellchat@net$count, 
                  vertex.weight = groupSize, weight.scale = T, 
                  label.edge= F, title.name = "Number of interactions",
                  color.use= getPalette(colourCount) )
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, 
                  label.edge= F, title.name = "Interaction weights/strength",
                  color.use= getPalette(colourCount))



########### nichenetr communication #########
########### nichenetr communication #########
########### nichenetr communication #########
#ref: https://github.com/saeyslab/nichenetr/blob/master/vignettes/seurat_steps.md

library(nichenetr)
library(Seurat) # please update to Seurat V4
library(tidyverse)

ligand_target_matrix = readRDS(url("https://zenodo.org/record/3260758/files/ligand_target_matrix.rds"))
ligand_target_matrix[1:5,1:5] # target genes in rows, ligands in columns


lr_network = readRDS(url("https://zenodo.org/record/3260758/files/lr_network.rds"))
head(lr_network)


weighted_networks = readRDS(url("https://zenodo.org/record/3260758/files/weighted_networks.rds"))
weighted_networks_lr = weighted_networks$lr_sig %>% inner_join(lr_network %>% distinct(from,to), by = c("from","to"))

head(weighted_networks$lr_sig) # interactions and their weights in the ligand-receptor + signaling network

head(weighted_networks$gr) # interactions and their weights in the gene regulatory network

## if human conversion need

#lr_network = lr_network %>% mutate(from = convert_human_to_mouse_symbols(from), to = convert_human_to_mouse_symbols(to)) %>% drop_na()
#colnames(ligand_target_matrix) = ligand_target_matrix %>% colnames() %>% convert_human_to_mouse_symbols()
#rownames(ligand_target_matrix) = ligand_target_matrix %>% rownames() %>% convert_human_to_mouse_symbols()
#ligand_target_matrix = ligand_target_matrix %>% .[!is.na(rownames(ligand_target_matrix)), !is.na(colnames(ligand_target_matrix))]
#weighted_networks_lr = weighted_networks_lr %>% mutate(from = convert_human_to_mouse_symbols(from), to = convert_human_to_mouse_symbols(to)) %>% drop_na()


seuratObj<-bm.dmp

## receiver
receiver = "BSN"
expressed_genes_receiver = get_expressed_genes(receiver, seuratObj, pct = 0.10)

background_expressed_genes = expressed_genes_receiver %>% .[. %in% rownames(ligand_target_matrix)]

## sender
sender_celltypes = c("CMPs","CLPs", "MDCP", "B cells", "iDCs", "pDCs","Macrophages","MM","BSN","Osteoclast","MSCs")

list_expressed_genes_sender = sender_celltypes %>% unique() %>% lapply(get_expressed_genes, seuratObj, 0.10) # lapply to get the expressed genes of every sender cell type separately here
expressed_genes_sender = list_expressed_genes_sender %>% unlist() %>% unique()

seurat_obj_receiver= subset(seuratObj, idents = receiver)
seurat_obj_receiver = SetIdent(seurat_obj_receiver, value = seurat_obj_receiver[["nCount_RNA"]])

condition_oi = "old"
condition_reference = "young" 


#marker  
DE_table_receiver = FindMarkers(object = seurat_obj_receiver, ident.1 = condition_oi, ident.2 = condition_reference, min.pct = 0.10) %>% rownames_to_column("gene")

geneset_oi = DE_table_receiver %>% filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>% pull(gene)
geneset_oi = geneset_oi %>% .[. %in% rownames(ligand_target_matrix)]


ligands = lr_network %>% pull(from) %>% unique()
receptors = lr_network %>% pull(to) %>% unique()

expressed_ligands = intersect(ligands,expressed_genes_sender)
expressed_receptors = intersect(receptors,expressed_genes_receiver)

potential_ligands = lr_network %>% filter(from %in% expressed_ligands & to %in% expressed_receptors) %>% pull(from) %>% unique()


best_upstream_ligands = ligand_activities %>% top_n(20, pearson) %>% arrange(-pearson) %>% pull(test_ligand) %>% unique()


### summary visualization

# ligand activity heatmap
ligand_pearson_matrix = ligand_activities %>% select(pearson) %>% as.matrix() %>% magrittr::set_rownames(ligand_activities$test_ligand)

rownames(ligand_pearson_matrix) = rownames(ligand_pearson_matrix) %>% make.names()
colnames(ligand_pearson_matrix) = colnames(ligand_pearson_matrix) %>% make.names()

vis_ligand_pearson = ligand_pearson_matrix[order_ligands, ] %>% as.matrix(ncol = 1) %>% magrittr::set_colnames("Pearson")
p_ligand_pearson = vis_ligand_pearson %>% make_heatmap_ggplot("Prioritized ligands","Ligand activity", color = "darkorange",legend_position = "top", x_axis_position = "top", legend_title = "Pearson correlation coefficient\ntarget gene prediction ability)") + theme(legend.text = element_text(size = 9))


weighted_networks = readRDS("/exdisk/sda1/database/nichenet/weighted_networks.rds")
ligand_tf_matrix = readRDS("/exdisk/sda1/database/nichenet/ligand_target_matrix.rds")

lr_network = readRDS("/exdisk/sda1/database/nichenet/lr_network.rds")
sig_network =readRDS("/exdisk/sda1/database/nichenet/signaling_network.rds")
gr_network = readRDS("/exdisk/sda1/database/nichenet/gr_network.rds")


spp1<-c("Spp1","Itgav","Itga4","Itga5","Itga8","Itga9","Itgb1","Itgb3","Itgb5","Itgb6")

ligands_all = "Spp1" # this can be a list of multiple ligands if required
targets_all = c("Itgav","Itga4","Itga5","Itga8","Itga9","Itgb1","Itgb3","Itgb5","Itgb6")

active_signaling_network = get_ligand_signaling_path(ligand_tf_matrix = ligand_tf_matrix, ligands_all = ligands_all, targets_all = targets_all, weighted_networks = weighted_networks)

# For better visualization of edge weigths: normalize edge weights to make them comparable between signaling and gene regulatory interactions
active_signaling_network_min_max = active_signaling_network
active_signaling_network_min_max$sig = active_signaling_network_min_max$sig %>% mutate(weight = ((weight-min(weight))/(max(weight)-min(weight))) + 0.75)
active_signaling_network_min_max$gr = active_signaling_network_min_max$gr %>% mutate(weight = ((weight-min(weight))/(max(weight)-min(weight))) + 0.75)

graph_min_max = diagrammer_format_signaling_graph(signaling_graph_list = active_signaling_network_min_max, ligands_all = ligands_all, targets_all = targets_all, sig_color = "indianred", gr_color = "steelblue")

# To render the graph: uncomment following line of code
# DiagrammeR::render_graph(graph_min_max, layout = "tree")








